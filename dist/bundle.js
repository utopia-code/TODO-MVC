(()=>{"use strict";var __webpack_modules__={271:()=>{eval('\n;// CONCATENATED MODULE: ./src/controllers/todo.controller.ts\nclass TodoController {\n    constructor(service, view) {\n        this.onTodoListChanged = (todos) => {\n            this.view.displayTodos(todos);\n        };\n        this.handleAddTodo = (todoText) => {\n            this.service.addTodo(todoText);\n        };\n        this.handleEditTodo = (id, todoText) => {\n            this.service.editTodo(id, todoText);\n        };\n        this.handleDeleteTodo = (id) => {\n            this.service.deleteTodo(id);\n        };\n        this.handleToggleTodo = (id) => {\n            this.service.toggleTodo(id);\n        };\n        this.service = service;\n        this.view = view;\n        this.service.bindTodoListChanged(this.onTodoListChanged);\n        this.view.bindAddTodo(this.handleAddTodo);\n        this.view.bindEditTodo(this.handleEditTodo);\n        this.view.bindDeleteTodo(this.handleDeleteTodo);\n        this.view.bindToggleTodo(this.handleToggleTodo);\n        this.onTodoListChanged(this.service.todos);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/models/todo.model.ts\nclass Todo {\n    constructor({ text, complete } = { text: \'\', complete: false }) {\n        this.id = this.uuidv4();\n        this.text = text;\n        this.complete = complete || false;\n    }\n    uuidv4() {\n        return ([1e7].toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (parseInt(c) ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (parseInt(c) / 4)))).toString(16));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/services/todo.service.ts\n\nclass TodoService {\n    constructor() {\n        this.onTodoListChanged = () => { };\n        const data = localStorage.getItem("todos");\n        this.todos = (data ? JSON.parse(data) : []).map((todo) => new Todo(todo));\n    }\n    bindTodoListChanged(callback) {\n        this.onTodoListChanged = callback;\n    }\n    _commit(todos) {\n        this.onTodoListChanged(todos);\n        localStorage.setItem("todos", JSON.stringify(todos));\n    }\n    addTodo(text) {\n        this.todos.push(new Todo({ text }));\n        this._commit(this.todos);\n    }\n    editTodo(id, updatedText) {\n        this.todos = this.todos.map(todo => todo.id === id\n            ? new Todo(Object.assign(Object.assign({}, todo), { text: updatedText }))\n            : todo);\n        this._commit(this.todos);\n    }\n    deleteTodo(_id) {\n        this.todos = this.todos.filter(({ id }) => id !== _id);\n        this._commit(this.todos);\n    }\n    toggleTodo(_id) {\n        this.todos = this.todos.map(todo => todo.id === _id ? new Todo(Object.assign(Object.assign({}, todo), { complete: !todo.complete })) : todo);\n        this._commit(this.todos);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/views/todo.view.ts\nclass TodoView {\n    constructor() {\n        this.app = this.getElement("#root");\n        this.form = this.createElement("form");\n        this.input = this.createElement("input");\n        this.input.type = "text";\n        this.input.placeholder = "Add todo";\n        this.input.name = "todo";\n        this.submitButton = this.createElement("button");\n        this.submitButton.textContent = "Submit";\n        this.form.append(this.input, this.submitButton);\n        this.title = this.createElement("h1");\n        this.title.textContent = "Todos";\n        this.todoList = this.createElement("ul", "todo-list");\n        this.app.append(this.title, this.form, this.todoList);\n        this._temporaryTodoText = "";\n        this._initLocalListeners();\n    }\n    get _todoText() {\n        return this.input.value;\n    }\n    _resetInput() {\n        this.input.value = "";\n    }\n    createElement(tag, className) {\n        const element = document.createElement(tag);\n        if (className)\n            element.classList.add(className);\n        return element;\n    }\n    getElement(selector) {\n        const element = document.querySelector(selector);\n        return element;\n    }\n    displayTodos(todos) {\n        while (this.todoList.firstChild) {\n            this.todoList.removeChild(this.todoList.firstChild);\n        }\n        if (todos.length === 0) {\n            const p = this.createElement("p");\n            p.textContent = "Nothing to do! Add a task?";\n            this.todoList.append(p);\n        }\n        else {\n            todos.forEach((todo) => {\n                const li = this.createElement("li");\n                li.id = todo.id;\n                const checkbox = this.createElement("input");\n                checkbox.type = "checkbox";\n                checkbox.checked = todo.complete;\n                const span = this.createElement("span");\n                span.contentEditable = "true";\n                span.classList.add("editable");\n                if (todo.complete) {\n                    const strike = this.createElement("s");\n                    strike.textContent = todo.text;\n                    span.append(strike);\n                }\n                else {\n                    span.textContent = todo.text;\n                }\n                const deleteButton = this.createElement("button", "delete");\n                deleteButton.textContent = "Delete";\n                li.append(checkbox, span, deleteButton);\n                this.todoList.append(li);\n            });\n        }\n        console.log(todos);\n    }\n    _initLocalListeners() {\n        this.todoList.addEventListener("input", (event) => {\n            if (event.target.className === "editable") {\n                this._temporaryTodoText = event.target.innerText;\n            }\n        });\n    }\n    bindAddTodo(handler) {\n        this.form.addEventListener("submit", (event) => {\n            event.preventDefault();\n            if (this._todoText) {\n                handler(this._todoText);\n                this._resetInput();\n            }\n        });\n    }\n    bindDeleteTodo(handler) {\n        this.todoList.addEventListener("click", (event) => {\n            if (event.target.className === "delete") {\n                const id = event.target.parentElement.id;\n                handler(id);\n            }\n        });\n    }\n    bindEditTodo(handler) {\n        this.todoList.addEventListener("focusout", (event) => {\n            if (this._temporaryTodoText) {\n                const id = event.target.parentElement.id;\n                handler(id, this._temporaryTodoText);\n                this._temporaryTodoText = "";\n            }\n        });\n    }\n    bindToggleTodo(handler) {\n        this.todoList.addEventListener("change", (event) => {\n            if (event.target.type === "checkbox") {\n                const id = event.target.parentElement.id;\n                handler(id);\n            }\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/app.ts\n\n\n\nconst app = new TodoController(new TodoService(), new TodoView());\n\n\n//# sourceURL=webpack://pec3_ej4/./src/app.ts_+_4_modules?')}},__webpack_exports__={};__webpack_modules__[271]()})();